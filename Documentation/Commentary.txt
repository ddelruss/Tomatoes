This file is an auxiliary commentary on the FreshTomatoes development project.
The -> marks indicate at what point I created a file in the project.
-> Commentary.txt

I begin by re-reading the requirements. Next, create a project structure that 
reflects the requirements: Client, Server, and Docs.
-> Requirements.txt
-> readme.txt

Next I want a high level architecture, in this case choosing the technologies.
This light-weight architecture step is a good time to validate assumptions about 
which technologies are current, play nice together, and suit the development team.
-> Architecture.txt

Next I want to get up and running with Node.js as my server software. I'll use a popular
tutorial to get started: http://www.tutorialspoint.com/nodejs/index.htm

I haven't used it on this machine before so I download and verify the installation. Since
my customer will need to do this, too, I begin documenting specific instructions.
-> Instructions.txt

For an API example I use a different tutorial:
https://www.thepolyglotdeveloper.com/2015/10/create-a-simple-restful-api-with-node-js/
-> files within Server folder

When I get to the routing phase I take a few minutes to design the RESTful API
-> API Design.txt

A key part of the API is knowing what we'll accept and return, which is our underlying data model.
For simplicity we'll adopt the suggested JSON 4-field format:
http://private-05248-rottentomatoes.apiary-mock.com/
-> Data Model.txt

With the design sketched out I create the initial routes and get a feel for any issues. It's best
to play with some data, so I selected a simple local storage module:
https://github.com/simonlast/node-persist

With basic plumbing working through the browser, I selected a unit testing framework to use for
TDD on the actual routes and behavior:
https://semaphoreci.com/community/tutorials/getting-started-with-node-js-and-jasmine

In the course of creating the app via TDD I encountered several issues:
* Storage library does not "valuesWithKeyMatch" as avertised, so I wrote my own filter
* Jasmine-node tests + storage library can be flaky and encounter race conditions even on sync calls
The issues seem to be related to the speed with which Jasmine executes HTTP requests against the 
Express server, which can cause setup tasks (like emptying the database) to interleave with subsequent
tasks. Too much to debug on my timeframe.

Working on the client, I started with an existing iOS project called Stockholm - please excuse any remnants such as
build artifacts and targets that retain the name. I created unit tests for the model and a functional
UI. 

Unfortunately I was unable to get the simulator to communicate with my localhost Node server, and 
exceeded my allotted time to resolve the issue. Instead I had my iOS app load from the apiary-mock
data upon refresh - drag the interface in order to initiate a refresh.

There are many small Client defects such as:
* Images do not update on device until the user clicks - proper image loading would update the UI without user action
* Deletions are only on the local device, not communicated to server
* Images are not forced to the same width on the main page
* On refresh images load multiple times (this would not happen if server could be treated as master)

On the bright side:
* Movies filter "live" based on "search" text - very responsive
* Deletions can be made within filtered results
* Filter persists through detail view
* Refresh loads from "server" (not mine)
* Detail view shows larger image
* ColorStruct shows how app colors can be controlled from centralized source (similar to CSS)

Overall this is a good *start* on an app, with many obvious areas for improvement both on client and server.
Apologies for the iOS app not directly communicating with the localhost Node app - these errors can take
a long time to resolve - hopefully it isn't material to our conversation.